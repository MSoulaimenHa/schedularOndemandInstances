name: Sync S3 bucket

on:
  workflow_dispatch:
    inputs:
      repos-name:
        required: true
        description: "Repository Name"
        type: choice
        options:
          - generative-virtual-staging-2
          - generative-virtual-refurnishing
      s3-bucket:
        required: true
        description: "S3 bucket uri that contains the checkpoints"
        type: choice
        options:
          - s3://generative-virtual-refurnishing/after-refactor/
          - s3://generative-virtual-staging2/
      folder-name:
        required: true
        description: "full folder path (/home/ubuntu/...) in the instance that has a volume binding on it , "
        type: string
        default: /home/ubuntu/checkpoints
      target-region:
        required: true
        description: "Target group region"
        type: choice
        options:
          - eu-central-1
          - us-east-2
      target-group-arn:
        required: true
        description: "Select the Target Group you are willing to work On"
        type: choice
        options:
          - arn:aws:elasticloadbalancing:eu-central-1:905418147598:targetgroup/generative-virtual-staging/cf60257b8cb37121
          - arn:aws:elasticloadbalancing:eu-central-1:905418147598:targetgroup/generative-virtual-refurnishing/704af4cdaf6dd0fd
          - arn:aws:elasticloadbalancing:us-east-2:905418147598:targetgroup/generative-virtual-staging/4eaf4d0805b76992
          - arn:aws:elasticloadbalancing:us-east-2:905418147598:targetgroup/generative-virtual-models/fab80f074da674f4
          - arn:aws:elasticloadbalancing:eu-central-1:905418147598:targetgroup/staging-legacy/37238b3433f58ecd
          - arn:aws:elasticloadbalancing:eu-central-1:905418147598:targetgroup/refurnishing-legacy/0c326d30a6cf522b

env:
  REPOS_OWNER: proptexx-com
  ECR_REGION: eu-central-1

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.target-region }}
      - name: Set up SSH key for eu-central-1
        if: ${{ github.event.inputs['target-region'] == 'eu-central-1' }}
        run: |
          echo "$PRIVATE_KEY_CONTENT" > private-key.pem
          chmod 600 private-key.pem
        env:
          PRIVATE_KEY_CONTENT: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up SSH key for us-east-2
        if: ${{ github.event.inputs['target-region'] == 'us-east-2' }}
        run: |
          echo "$PRIVATE_KEY_CONTENT" > private-key.pem
          chmod 600 private-key.pem
        env:
          PRIVATE_KEY_CONTENT: ${{ secrets.SSH_PRIVATE_KEY_CENTRAL }}
      - name: Deploy Docker to instances
        run: |
          # Fetch instance IDs and store them in a list
          instance_ids=$(aws elbv2 describe-target-health --target-group-arn ${{ github.event.inputs.target-group-arn }} --query 'TargetHealthDescriptions[].Target.Id' --output text --region ${{ github.event.inputs.target-region }})

          for instance_id in $instance_ids; do
            echo "Deploying to instance ID: $instance_id"
            instance_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[].Instances[].PublicIpAddress' --output text --region ${{ github.event.inputs.target-region }})
            echo "Instance IP: $instance_ip"
            ssh -o StrictHostKeyChecking=no -i ./private-key.pem ubuntu@$instance_ip "
              cd /home/ubuntu/ && \
              docker-compose down && \
              aws s3 sync ${{ github.event.inputs['s3-bucket'] }} ${{ github.event.inputs['folder-name'] }} && \
              docker-compose up -d
            "
          done
