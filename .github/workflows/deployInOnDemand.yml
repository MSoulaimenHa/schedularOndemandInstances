name: Deploy specific repos in on-demand instance

on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        description: "Branch to checkout to it"
      docker-tag:
        required: true
        description: "Assign a tag for the version of the deployment (exp: let's say that the current version is 2.0.2 assign tag 2.0.2-1)"
        default: latest-v2
      repos-name:
        required: true
        description: "Repository Name"
        type: choice
        options:
          - generative-virtual-staging-2
          - generative-virtual-refurnishing
      target-group-arn:
        required: true
        description: "Select the Target Group you are willing to work On"
        type: choice
        options:
          - arn:aws:elasticloadbalancing:eu-central-1:905418147598:targetgroup/generative-virtual-staging/cf60257b8cb37121
          - arn:aws:elasticloadbalancing:eu-central-1:905418147598:targetgroup/generative-virtual-refurnishing/704af4cdaf6dd0fd
      ECR_REPOSITORY:
        required: true
        type: choice
        description: "Choose one of the following ECR repository."
        options:
          - 905418147598.dkr.ecr.eu-central-1.amazonaws.com/generative-staging-v2
          - 905418147598.dkr.ecr.eu-central-1.amazonaws.com/generative-virtual-refurnishing
env:
  REPOS_OWNER: proptexx-com

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Clone Repository
        uses: GuillaumeFalourd/clone-github-repo-action@v2.3
        with:
          owner: ${{ env.REPOS_OWNER }}
          repository: ${{ github.event.inputs.repos-name }}
          access-token: ${{ secrets.ACCESS_TOKEN }}
          branch: ${{ github.event.inputs.branch }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR, build and push Docker container
        id: ecr-login
        run: |
          cd ${{ github.event.inputs.repos-name }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ github.event.inputs.ECR_REPOSITORY }}
          docker build -t ${{ github.event.inputs.ECR_REPOSITORY }}:${{ github.event.inputs.docker-tag }} .
          docker push ${{ github.event.inputs.ECR_REPOSITORY }}:${{ github.event.inputs.docker-tag }}

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up SSH key
        run: |
          echo "$PRIVATE_KEY_CONTENT" > private-key.pem
          chmod 600 private-key.pem
        env:
          PRIVATE_KEY_CONTENT: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Refurnishing instances
        if: ${{ github.event.inputs.repos-name == 'generative-virtual-refurnishing' }}
        run: |
          # Fetch instance IDs and store them in a list
          instance_ids=$(aws elbv2 describe-target-health --target-group-arn ${{ github.event.inputs.target-group-arn }} --query 'TargetHealthDescriptions[].Target.Id' --output text --region ${{ secrets.AWS_REGION }})

          for instance_id in $instance_ids; do
            echo "Deploying to instance ID: $instance_id"
            instance_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[].Instances[].PublicIpAddress' --output text --region ${{ secrets.AWS_REGION }})
            echo "Instance IP: $instance_ip"
            ssh -o StrictHostKeyChecking=no -i ./private-key.pem ubuntu@$instance_ip "
              docker system prune --force --all --volumes && \
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ github.event.inputs.ECR_REPOSITORY }} && \
              docker pull ${{ github.event.inputs.ECR_REPOSITORY }}:${{ github.event.inputs.docker-tag }} && \
              cd /home/ubuntu/ && \
              docker-compose down && \
              echo 'version: \"3.8\"' > /home/ubuntu/docker-compose.yml && \
              echo '' >> /home/ubuntu/docker-compose.yml && \
              echo 'services:' >> /home/ubuntu/docker-compose.yml && \
              echo '  ${{ github.event.inputs.repos-name }}:' >> /home/ubuntu/docker-compose.yml && \
              echo '    image: ${{ github.event.inputs.ECR_REPOSITORY }}:${{ github.event.inputs.docker-tag }}' >> /home/ubuntu/docker-compose.yml && \
              echo '    ports:' >> /home/ubuntu/docker-compose.yml && \
              echo '      - \"80:8080\"' >> /home/ubuntu/docker-compose.yml && \
              echo '    restart: always' >> /home/ubuntu/docker-compose.yml && \
              echo '    volumes:' >> /home/ubuntu/docker-compose.yml && \
              echo '      - /home/ubuntu/refurnishing/trained_weights:/usr/src/app/trained_weights' >> /home/ubuntu/docker-compose.yml && \
              echo '      - /home/ubuntu/refurnishing/huggingface:/root/.cache/huggingface' >> /home/ubuntu/docker-compose.yml && \
              echo '    logging:' >> /home/ubuntu/docker-compose.yml && \
              echo '      driver: awslogs' >> /home/ubuntu/docker-compose.yml && \
              echo '      options:' >> /home/ubuntu/docker-compose.yml && \
              echo '        awslogs-group: generative-virtual-models' >> /home/ubuntu/docker-compose.yml && \
              echo '        awslogs-stream: ${{ github.event.inputs.repos-name }}' >> /home/ubuntu/docker-compose.yml && \
              echo '    deploy:' >> /home/ubuntu/docker-compose.yml && \
              echo '      resources:' >> /home/ubuntu/docker-compose.yml && \
              echo '        reservations:' >> /home/ubuntu/docker-compose.yml && \
              echo '          devices:' >> /home/ubuntu/docker-compose.yml && \
              echo '            - driver: nvidia' >> /home/ubuntu/docker-compose.yml && \
              echo '              count: all' >> /home/ubuntu/docker-compose.yml && \
              echo '              capabilities: [gpu]' >> /home/ubuntu/docker-compose.yml && \
              docker-compose up -d"
          done

      - name: Deploy to Staging instances
        if: ${{ github.event.inputs.repos-name == 'generative-virtual-staging-2' }}
        run: |
          # Fetch instance IDs and store them in a list
          instance_ids=$(aws elbv2 describe-target-health --target-group-arn ${{ github.event.inputs.target-group-arn }} --query 'TargetHealthDescriptions[].Target.Id' --output text --region ${{ secrets.AWS_REGION }})

          for instance_id in $instance_ids; do
            echo "Deploying to instance ID: $instance_id"
            instance_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[].Instances[].PublicIpAddress' --output text --region ${{ secrets.AWS_REGION }})
            echo "Instance IP: $instance_ip"
            ssh -o StrictHostKeyChecking=no -i ./private-key.pem ubuntu@$instance_ip "
              docker system prune --force --all --volumes && \
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ github.event.inputs.ECR_REPOSITORY }} && \
              docker pull ${{ github.event.inputs.ECR_REPOSITORY }}:${{ github.event.inputs.docker-tag }} && \
              cd /home/ubuntu/ && \
              docker-compose down && \
              echo 'version: \"3.8\"' > /home/ubuntu/docker-compose.yml && \
              echo '' >> /home/ubuntu/docker-compose.yml && \
              echo 'services:' >> /home/ubuntu/docker-compose.yml && \
              echo '  ${{ github.event.inputs.repos-name }}:' >> /home/ubuntu/docker-compose.yml && \
              echo '    image: ${{ github.event.inputs.ECR_REPOSITORY }}:${{ github.event.inputs.docker-tag }}' >> /home/ubuntu/docker-compose.yml && \
              echo '    environment:' >> /home/ubuntu/docker-compose.yml && \
              echo '      CODEFORMER_PATH: \"./checkpoints/codeformer\"' >> /home/ubuntu/docker-compose.yml && \
              echo '      CACHE_DIRECTORY: \"./checkpoints/cache\"' >> /home/ubuntu/docker-compose.yml && \
              echo '      PADDLE_MODEL_PATH: \"./checkpoints/paddle\"' >> /home/ubuntu/docker-compose.yml && \
              echo '    container_name: staging' >> /home/ubuntu/docker-compose.yml && \
              echo '    restart: always' >> /home/ubuntu/docker-compose.yml && \
              echo '    ports:' >> /home/ubuntu/docker-compose.yml && \
              echo '      - 80:8080' >> /home/ubuntu/docker-compose.yml && \
              echo '    volumes:' >> /home/ubuntu/docker-compose.yml && \
              echo '      - ./output:/usr/src/app/checkpoints' >> /home/ubuntu/docker-compose.yml && \
              echo '    deploy:' >> /home/ubuntu/docker-compose.yml && \
              echo '      resources:' >> /home/ubuntu/docker-compose.yml && \
              echo '        reservations:' >> /home/ubuntu/docker-compose.yml && \
              echo '          devices:' >> /home/ubuntu/docker-compose.yml && \
              echo '            - driver: nvidia' >> /home/ubuntu/docker-compose.yml && \
              echo '              count: all' >> /home/ubuntu/docker-compose.yml && \
              echo '              capabilities: [gpu]' >> /home/ubuntu/docker-compose.yml && \
              echo '    runtime: nvidia' >> /home/ubuntu/docker-compose.yml && \
              echo '    logging:' >> /home/ubuntu/docker-compose.yml && \
              echo '      driver: awslogs' >> /home/ubuntu/docker-compose.yml && \
              echo '      options:' >> /home/ubuntu/docker-compose.yml && \
              echo '        awslogs-group: generative-virtual-models' >> /home/ubuntu/docker-compose.yml && \
              echo '        awslogs-stream: ${{ github.event.inputs.repos-name }}' >> /home/ubuntu/docker-compose.yml && \
              docker-compose up -d"
          done

  staging-api:
    runs-on: self-hosted
    needs: [deploy, build]
    if: ${{ github.event.inputs.repos-name == 'generative-virtual-staging-2' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Send API's first request
        run: |
          bash ./wakeup-instances/sendRequests.sh ${{ secrets.AWS_REGION }} ${{ github.event.inputs.target-group-arn }}
  refurnishing-api:
    runs-on: self-hosted
    needs: [deploy, build]
    if: ${{ github.event.inputs.repos-name == 'generative-virtual-refurnishing' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Send API's first request
        run: |
          bash ./wakeup-instances/sendRequestsRefurnishing.sh ${{ secrets.AWS_REGION }} ${{ github.event.inputs.target-group-arn }}
