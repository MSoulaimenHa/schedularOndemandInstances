name: Build docker container

on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        description: "Branch to checkout to it"
      docker-tag:
        required: true
        description: "Assign a tag for the version of the deployment (exp: let's say that the current version is 2.0.2 assign tag 2.0.2-1)"
        default: latest-v2
      repos-name:
        required: true
        description: "Repository Name"
        type: choice
        options:
          - generative-virtual-staging-2
          - generative-virtual-refurnishing
      ECR_REPOSITORY:
        required: true
        type: choice
        description: "Choose one of the following ECR repository."
        options:
          - 905418147598.dkr.ecr.eu-central-1.amazonaws.com/generative-staging-v2
          - 905418147598.dkr.ecr.eu-central-1.amazonaws.com/generative-virtual-refurnishing
env:
  REPOS_OWNER: proptexx-com

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Remove existing directory if it exists
        run: |
          if [ -d "${{ github.event.inputs.repos-name }}" ]; then
            rm -rf ${{ github.event.inputs.repos-name }}
          fi
      - name: Clone Repository
        uses: GuillaumeFalourd/clone-github-repo-action@v2.3
        with:
          owner: ${{ env.REPOS_OWNER }}
          repository: ${{ github.event.inputs.repos-name }}
          access-token: ${{ secrets.ACCESS_TOKEN }}
          branch: ${{ github.event.inputs.branch }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR, build and push Docker container
        id: ecr-login
        run: |
          cd ${{ github.event.inputs.repos-name }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ github.event.inputs.ECR_REPOSITORY }}
          docker build -t ${{ github.event.inputs.ECR_REPOSITORY }}:${{ github.event.inputs.docker-tag }} .
          docker push ${{ github.event.inputs.ECR_REPOSITORY }}:${{ github.event.inputs.docker-tag }}
          docker system prune --all --volumes --force
